apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: flux-multi-tenancy
spec:
  validationFailureAction: Enforce
  rules:
    - name: serviceAccountNameMustBeSet
      exclude:
        resources:
          namespaces:
            - "flux-giantswarm"
            - "giantswarm"
            - "monitoring"
      match:
        resources:
          kinds:
            - Kustomization
            - HelmRelease
            - ResourceSet
      validate:
        message: "either .spec.serviceAccountName or .spec.kubeConfig.secretRef.name is required"
        anyPattern:
        - spec:
            serviceAccountName: "?*"
        - spec:
            kubeConfig:
              secretRef:
                name: "?*"
    - name: kustomizationSourceRefNamespaceIsSafe
      exclude:
        resources:
          namespaces:
            - "flux-giantswarm"
            - "giantswarm"
            - "monitoring"
      match:
        resources:
          kinds:
            - Kustomization
      validate:
        message: "spec.sourceRef.namespace must be the same as metadata.namespace or 'default'"
        anyPattern:
          - spec:
              sourceRef:
                =(namespace): "default"
          - spec:
              sourceRef:
                =(namespace): "{{request.object.metadata.namespace}}"
    - name: helmReleaseSourceRefNamespaceIsSafe
      exclude:
        resources:
          namespaces:
            - "flux-giantswarm"
            - "giantswarm"
            - "monitoring"
      match:
        resources:
          kinds:
            - HelmRelease
      validate:
        message: "spec.chart.spec.sourceRef.namespace must be the same as metadata.namespace or 'default'"
        anyPattern:
          - spec:
              chart:
                spec:
                  sourceRef:
                    =(namespace): "default"
          - spec:
              chart:
                spec:
                  sourceRef:
                    =(namespace): "{{request.object.metadata.namespace}}"
    - name: resourceSetCopyFromNamespaceIsSafe
      exclude:
        resources:
          namespaces:
            - "flux-giantswarm"
            - "giantswarm"
            - "monitoring"
      match:
        resources:
          kinds:
            - ResourceSet
      validate:
        message: "copyFrom namespace must be the same as metadata.namespace or 'default' for all resources"
        anyPattern:
          - spec:
              resources:
                - metadata:
                    =(annotations):
                      =(fluxcd.controlplane.io/copyFrom): "default/*"
          - spec:
              resources:
                - metadata:
                    =(annotations):
                      =(fluxcd.controlplane.io/copyFrom): "{{request.object.metadata.namespace}}/*"
    - name: targetNamespaceMustBeLocal
      exclude:
        resources:
          namespaces:
            - "flux-giantswarm"
            - "giantswarm"
            - "monitoring"
      match:
        resources:
          kinds:
            - Kustomization
            - HelmRelease
      validate:
        message: "spec.targetNamespace must be the same as metadata.namespace unless kubeConfig.secretRef.name is set"
        anyPattern:
          - spec:
              =(targetNamespace): "{{request.object.metadata.namespace}}"
          - spec:
              =(targetNamespace): "org-* & !org-giantswarm"
          - spec:
              kubeConfig:
                secretRef:
                  name: "?*"
    - name: storageNamespaceMustBeLocal
      exclude:
        resources:
          namespaces:
            - "flux-giantswarm"
            - "giantswarm"
            - "monitoring"
      match:
        resources:
          kinds:
            - HelmRelease
      validate:
        message: "spec.storageNamespace must be the same as metadata.namespace unless kubeConfig.secretRef.name is set"
        anyPattern:
          - spec:
              =(storageNamespace): "{{request.object.metadata.namespace}}"
          - spec:
              kubeConfig:
                secretRef:
                  name: "?*"
    - name: alertEventSourcesMustBeLocal
      exclude:
        resources:
          namespaces:
            - "flux-giantswarm"
            - "giantswarm"
            - "monitoring"
      match:
        resources:
          kinds:
            - Alert
      validate:
        message: "spec.eventSources namespaces must be the same as metadata.namespace"
        foreach:
        - list: "request.object.spec.eventSources"
          pattern:
            =(namespace): "{{request.object.metadata.namespace}}"
    - name: receiverResourcesMustBeLocal
      exclude:
        resources:
          namespaces:
            - "flux-giantswarm"
            - "giantswarm"
            - "monitoring"
      match:
        resources:
          kinds:
            - Receiver
      validate:
        message: "spec.resources namespaces must be the same as metadata.namespace"
        foreach:
        - list: "request.object.spec.resources"
          pattern:
            =(namespace): "{{request.object.metadata.namespace}}"
    - name: eventsObjectMustBeLocal
      exclude:
        resources:
          namespaces:
            - "flux-giantswarm"
            - "giantswarm"
            - "monitoring"
      match:
        resources:
          kinds:
            - Event
      validate:
        message: "spec.involvedObject namespace must be the same as metadata.namespace"
        pattern:
          spec:
            involvedObject:
              =(namespace): "{{request.object.metadata.namespace}}"
    - name: imagePolicyRepositoryMustBeLocal
      exclude:
        resources:
          namespaces:
            - "flux-giantswarm"
            - "giantswarm"
            - "monitoring"
      match:
        resources:
          kinds:
            - ImagePolicy
      validate:
        message: "spec.imageRepositoryRef namespace must be the same as metadata.namespace"
        pattern:
          spec:
            imageRepositoryRef:
              =(namespace): "{{request.object.metadata.namespace}}"
