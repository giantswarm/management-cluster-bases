apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: argo-cluster-secret-generation
  annotations:
    policies.kyverno.io/title: Argo Cluster Secret Generation
    policies.kyverno.io/category: Argo
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Secret
    policies.kyverno.io/description: >-
      This policy generates and synchronizes Argo CD cluster secrets.
spec:
  generateExistingOnPolicyUpdate: true
  background: true
  rules:
    - name: sync-cluster-kubeconfigs-to-argo-cluster-secrets
      match:
        all:
          - resources:
              kinds:
                - cluster.x-k8s.io/v1beta1/Cluster
      context:
        - name: clusterName
          variable:
            value: "{{request.object.metadata.name}}"
            jmesPath: 'to_string(@)'
        - name: argoKubeconfigName
          variable:
            value: "{{ join('-', [clusterName, 'kubeconfig', 'argo']) }}"
            jmesPath: 'to_string(@)'
        - name: kubeconfigName
          variable:
            value: "{{ join('-', [clusterName, 'kubeconfig']) }}"
            jmesPath: 'to_string(@)'
        - name: metadataLabels
          variable:
            value:
               argocd.argoproj.io/secret-type: cluster
               giantswarm.io/cluster: "{{ clusterName }}"
        - name: kubeconfigSecret
          apiCall:
            # NOTABLE DIFFERENCE: this is CAPx specific, needs to be patched for Legacy clusters
            urlPath: "/api/v1/namespaces/{{request.object.metadata.namespace}}/secrets/{{kubeconfigName}}"
            jmesPath: 'to_string(@)'
        - name: kubeconfigNamespace
          variable:
            value: "{{ kubeconfigSecret | parse_yaml(@).metadata.namespace }}"
            jmesPath: 'to_string(@)'
        - name: serverName
          variable:
            value: "{{ kubeconfigSecret | parse_yaml(@).data.value | base64_decode(@) | parse_yaml(@).clusters[0].cluster.server }}"
            jmesPath: 'to_string(@)'
        - name: caData
          variable:
            value: "{{ kubeconfigSecret | parse_yaml(@).data.value | base64_decode(@) | parse_yaml(@).clusters[0].cluster.\"certificate-authority-data\" }}"
            jmesPath: 'to_string(@)'
        - name: certData
          variable:
            value: "{{ kubeconfigSecret | parse_yaml(@).data.value | base64_decode(@) | parse_yaml(@).users[0].user.\"client-certificate-data\" }}"
            jmesPath: 'to_string(@)'
        - name: keyData
          variable:
            value: "{{ kubeconfigSecret | parse_yaml(@).data.value | base64_decode(@) | parse_yaml(@).users[0].user.\"client-key-data\" }}"
            jmesPath: 'to_string(@)'
        - name: dataConfig
          variable:
            value: |
              {
                "tlsClientConfig": {
                  "insecure": false,
                  "caData": "{{ caData }}",
                  "certData": "{{ certData }}",
                  "keyData": "{{ keyData }}"
                }
              }
            jmesPath: 'to_string(@)'
      generate:
        synchronize: true
        apiVersion: v1
        kind: Secret
        name: "{{ argoKubeconfigName }}"
        namespace: "{{ kubeconfigNamespace }}"
        data:
          metadata:
            labels:
              "{{ metadataLabels }}"
          type: Opaque
          data:
            name: "{{ clusterName | base64_encode(@) }}"
            server: "{{ serverName | base64_encode(@) }}"
            config: "{{ dataConfig | base64_encode(@) }}"
